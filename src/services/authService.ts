/**
 * SERVI√áO DE AUTENTICA√á√ÉO
 * 
 * Este arquivo gerencia todas as chamadas ao backend relacionadas a autentica√ß√£o.
 * Aqui voc√™ deve configurar a URL do seu backend real.
 * 
 * Fun√ß√µes dispon√≠veis:
 * - login: Autentica o usu√°rio com email e senha
 * - register: Cadastra um novo usu√°rio
 * - logout: Encerra a sess√£o do usu√°rio
 */

// IMPORTANTE: Configure aqui a URL do seu backend
const API_BASE_URL = 'http://localhost:8080'; // URL do backend Java

/**
 * Interface que define os dados de um usu√°rio (UserResponse do backend)
 */
export interface User {
  id: number;
  name: string;
  username: string;
  cpf: string;
}

/**
 * Interface para dados de login
 */
export interface LoginCredentials {
  username: string;
  password: string;
}

/**
 * Interface para dados de cadastro (deve corresponder ao CreateUserRequest do backend)
 */
export interface RegisterData {
  name: string;
  username: string;
  password: string;
  cpf: string;
}

/**
 * Interface para resposta do backend
 */
export interface AuthResponse {
  success: boolean;
  user?: User;
  token?: string;
  message?: string;
}

/**
 * Fun√ß√£o para fazer login
 * 
 * @param credentials - Username e senha do usu√°rio
 * @returns Resposta com dados do usu√°rio
 */
export const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {
  try {
    console.log('üì§ Passo 1: Autenticando usu√°rio:', { username: credentials.username });
    
    // Passo 1: Autentica o usu√°rio (retorna true/false)
    const loginResponse = await fetch(`${API_BASE_URL}/users/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });

    console.log('üì• Status da autentica√ß√£o:', loginResponse.status);
    
    const isAuthenticated = await loginResponse.json();
    console.log('üì• Autenticado?', isAuthenticated);

    if (!loginResponse.ok || !isAuthenticated) {
      throw new Error('Username ou senha incorretos');
    }

    // Passo 2: Busca os dados completos do usu√°rio
    console.log('üì§ Passo 2: Buscando dados do usu√°rio:', credentials.username);
    
    const userResponse = await fetch(`${API_BASE_URL}/users/${credentials.username}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log('üì• Status da busca do usu√°rio:', userResponse.status);

    if (!userResponse.ok) {
      throw new Error('Erro ao buscar dados do usu√°rio');
    }

    const userData = await userResponse.json();
    console.log('üì• Dados do usu√°rio recebidos:', userData);

    // Salva os dados do usu√°rio no localStorage
    localStorage.setItem('user', JSON.stringify(userData));
    // Marca como autenticado
    localStorage.setItem('authToken', 'authenticated');

    return {
      success: true,
      user: userData,
    };
  } catch (error) {
    console.error('‚ùå Erro no login:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Erro desconhecido ao fazer login',
    };
  }
};

/**
 * Fun√ß√£o para cadastrar um novo usu√°rio
 * 
 * @param userData - Dados do novo usu√°rio (nome, username, senha, cpf)
 * @returns Resposta com dados do usu√°rio criado
 */
export const register = async (userData: RegisterData): Promise<AuthResponse> => {
  try {
    console.log('üì§ Enviando dados para o backend:', userData);
    
    const response = await fetch(`${API_BASE_URL}/users/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    console.log('üì• Status da resposta:', response.status);
    
    const data = await response.json();
    console.log('üì• Dados recebidos do backend:', data);

    if (!response.ok) {
      // Backend retorna { message: "..." } em caso de erro (status 400)
      throw new Error(data.message || 'Erro ao cadastrar usu√°rio');
    }

    // Sucesso: Backend retorna diretamente o UserResponse (status 201)
    // Como n√£o h√° token/autentica√ß√£o autom√°tica, apenas retornamos os dados do usu√°rio
    return {
      success: true,
      user: data, // data j√° √© o UserResponse com {id, name, username, cpf}
    };
  } catch (error) {
    console.error('‚ùå Erro no cadastro:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Erro desconhecido ao cadastrar',
    };
  }
};

/**
 * Fun√ß√£o para fazer logout
 * Remove os dados do usu√°rio do localStorage
 */
export const logout = (): void => {
  localStorage.removeItem('authToken');
  localStorage.removeItem('user');
};

/**
 * Fun√ß√£o para verificar se o usu√°rio est√° autenticado
 * 
 * @returns true se o usu√°rio estiver logado, false caso contr√°rio
 */
export const isAuthenticated = (): boolean => {
  const token = localStorage.getItem('authToken');
  return !!token;
};

/**
 * Fun√ß√£o para obter os dados do usu√°rio logado
 * 
 * @returns Dados do usu√°rio ou null se n√£o estiver logado
 */
export const getCurrentUser = (): User | null => {
  const userString = localStorage.getItem('user');
  if (!userString) return null;
  
  try {
    return JSON.parse(userString);
  } catch {
    return null;
  }
};

/**
 * Fun√ß√£o para obter o token de autentica√ß√£o
 * 
 * @returns Token de autentica√ß√£o ou null
 */
export const getAuthToken = (): string | null => {
  return localStorage.getItem('authToken');
};
